export default function _iterableToArrayLimitLoose(arr, i) {
<<<<<<< HEAD
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];

  for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
=======
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];

  for (_i = _i.call(arr), _step; !(_step = _i.next()).done;) {
>>>>>>> dea1f40603bd8c2fd2deb4cd684cf871afc501c3
    _arr.push(_step.value);

    if (i && _arr.length === i) break;
  }

  return _arr;
}